<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Joker</name>
    </assembly>
    <members>
        <member name="T:Joker.AppInterface.Folders">
            <summary>
            Contains string constants that are used multiple times to identify various asset paths or folder names.
            </summary>
        </member>
        <member name="F:Joker.AppInterface.Folders.GalleryFolderName">
            <summary>
            Folder name for pictures saved in the device gallery app.
            </summary>
        </member>
        <member name="F:Joker.AppInterface.Folders.PictureAssets">
            <summary>
            Path root of embedded picture feed assets.
            </summary>
        </member>
        <member name="F:Joker.AppInterface.Folders.TextAssets">
            <summary>
            Path root of embedded text assets.
            </summary>
        </member>
        <member name="T:Joker.AppInterface.IPlatformFileSaver">
            <summary>
            A custom API for the shared code that abstracts away the platform-specific file IO services.
            </summary>
        </member>
        <member name="M:Joker.AppInterface.IPlatformFileSaver.SaveToGallery(System.String)">
            <summary>
            Saves a picture's file to the user's personal storage and indicates whether the process was successful.
            </summary>
            <param name="filePath">File path to the image resource.</param>
            <returns>True if the file could be saved, otherwise false.</returns>
        </member>
        <member name="T:Joker.AppInterface.IPlatformNotifier">
            <summary>
            A custom API for the shared code that abstracts away the platform-specific push notification services of the
            target systems specifically for use in this app.
            </summary>
        </member>
        <member name="M:Joker.AppInterface.IPlatformNotifier.ScheduleLimitExpired(System.DateTime)">
            <summary>
            Schedules a notification indicating the current limit has expired and a new one should be set.
            </summary>
            <param name="timeSetting">The time at which the notification should appear.</param>
        </member>
        <member name="M:Joker.AppInterface.IPlatformNotifier.CancelLimitExpired">
            <summary>
            Removes the notification that indicates that the current limit has expired.
            </summary>
        </member>
        <member name="M:Joker.AppInterface.IPlatformNotifier.ScheduleNewPicture(System.DateTime)">
            <summary>
            Schedules a notification indicating that a new picture is available to see.
            </summary>
            <param name="timeSetting">The time at which the notification should appear.</param>
        </member>
        <member name="M:Joker.AppInterface.IPlatformNotifier.ScheduleGambleReminder(System.TimeSpan)">
            <summary>
            Schedules a notification reminding the user to always record acts of gambling within the app.
            </summary>
            <param name="interval">The interval for the time the notification should appear.</param>
        </member>
        <member name="M:Joker.AppInterface.IPlatformNotifier.ScheduleLimitReminder(System.TimeSpan)">
            <summary>
            Schedules a notification reminding the user about the current state of their limit.
            </summary>
            <param name="interval">The interval for the time the notification should appear.</param>
        </member>
        <member name="T:Joker.AppInterface.Notifications">
            <summary>
            Container class for constructing the text shown in different kinds of push notifications.
            </summary>
        </member>
        <member name="T:Joker.AppInterface.Notifications.Channel">
            <summary>
            Holds the names of each notification channel.
            </summary>
        </member>
        <member name="F:Joker.AppInterface.Notifications.Channel.LimitExpired">
            <summary>
            Notification channel for when the current limit expires.
            </summary>
        </member>
        <member name="F:Joker.AppInterface.Notifications.Channel.NewPicture">
            <summary>
            Notification channel for when a new picture is available.
            </summary>
        </member>
        <member name="F:Joker.AppInterface.Notifications.Channel.GambleReminder">
            <summary>
            Notification channel for reminders about recording gambling-related spendings.
            </summary>
        </member>
        <member name="F:Joker.AppInterface.Notifications.Channel.LimitReminder">
            <summary>
            Notification channel for reminders about the current limit state.
            </summary>
        </member>
        <member name="T:Joker.AppInterface.Notifications.Title">
            <summary>
            Holds the titles of each kind of notification.
            </summary>
        </member>
        <member name="P:Joker.AppInterface.Notifications.Title.LimitExpired">
            <summary>
            Title of the notification indicating that the current has limit has expired.
            </summary>
        </member>
        <member name="P:Joker.AppInterface.Notifications.Title.NewPicture">
            <summary>
            Title of the notification indicating that a new picture is available to see.
            </summary>
        </member>
        <member name="P:Joker.AppInterface.Notifications.Title.GambleReminder">
            <summary>
            Title of the notification reminding the user to always record his acts of gambling.
            </summary>
        </member>
        <member name="P:Joker.AppInterface.Notifications.Title.LimitReminder">
            <summary>
            Title of the notification reminding the user about their limit's current state.
            </summary>
        </member>
        <member name="T:Joker.AppInterface.Notifications.Body">
            <summary>
            Holds the main texts of each kind of notification.
            </summary>
        </member>
        <member name="P:Joker.AppInterface.Notifications.Body.LimitExpired">
            <summary>
            Main text of the notification indicating that the current has limit has expired.
            </summary>
        </member>
        <member name="P:Joker.AppInterface.Notifications.Body.NewPicture">
            <summary>
            Main text of the notification indicating that a new picture is available to see.
            </summary>
        </member>
        <member name="P:Joker.AppInterface.Notifications.Body.GambleReminder">
            <summary>
            Main text of the notification reminding the user to record his acts of gambling.
            </summary>
        </member>
        <member name="P:Joker.AppInterface.Notifications.Body.LimitReminder">
            <summary>
            Main text of the notification reminding the user about their limit's current state.
            </summary>
        </member>
        <member name="T:Joker.AppInterface.NotificationType">
            <summary>
            The different kinds of notifications sent by the application. Also used to supply IDs to each notification and
            related properties.
            </summary>
        </member>
        <member name="F:Joker.AppInterface.NotificationType.LimitExpired">
            <summary>
            Notifies the user that his limit has expired and a new one must be set.
            </summary>
        </member>
        <member name="F:Joker.AppInterface.NotificationType.NewPicture">
            <summary>
            Notifies the user that a new motivating picture has been added to the database.
            </summary>
        </member>
        <member name="F:Joker.AppInterface.NotificationType.GambleReminder">
            <summary>
            Notifies the user to always record his spendings for gambling.
            </summary>
        </member>
        <member name="F:Joker.AppInterface.NotificationType.LimitReminder">
            <summary>
            Notifies the user about the current state of their limit.
            </summary>
        </member>
        <member name="T:Joker.AppInterface.PreserveAttribute">
            <summary>
            Necessary so that the linker doesn't strip out properties that are read only in XAML.
            </summary>
        </member>
        <member name="F:Joker.AppInterface.PreserveAttribute.AllMembers">
            <summary>
            Ensures that all members of this type are preserved.
            </summary>
        </member>
        <member name="F:Joker.AppInterface.PreserveAttribute.Conditional">
            <summary>
            Flags the method as a method to preserve during linking if the container class is pulled in.
            </summary>
        </member>
        <member name="T:Joker.AppInterface.TextAssetReader">
            <summary>
            Utility class that handles interaction with embedded text assets.
            </summary>
        </member>
        <member name="F:Joker.AppInterface.TextAssetReader.Pattern">
            <summary>
            Regex pattern for detecting uses of placeholder keywords in a text asset.
            </summary>
        </member>
        <member name="M:Joker.AppInterface.TextAssetReader.Get(System.String)">
            <summary>
            Extracts the plaintext from a specified text asset and fills placeholders with the appropriate text.
            </summary>
            <param name="fileName">The file to look for.</param>
            <returns>The plaintext content of the file as a UTF-8 string.</returns>
        </member>
        <member name="T:Joker.BusinessLogic.Contact">
            <summary>
            Represents a simplified phone contact with a name and one phone number.
            </summary>
        </member>
        <member name="F:Joker.BusinessLogic.Contact.MaxNameLength">
            <summary>
            The maximum string length for the contact's name.
            </summary>
        </member>
        <member name="F:Joker.BusinessLogic.Contact.MaxPhoneNumberLength">
            <summary>
            The maximum string length for the contact's phone number.
            </summary>
        </member>
        <member name="F:Joker.BusinessLogic.Contact.Bzga">
            <summary>
            Contact information for the Bundeszentrale für gesundheitliche Aufklärung.
            </summary>
        </member>
        <member name="P:Joker.BusinessLogic.Contact.Id">
            <summary>
            The numeric identifier for a contact in the database.
            </summary>
        </member>
        <member name="P:Joker.BusinessLogic.Contact.Name">
            <summary>
            The name associated with this contact.
            </summary>
        </member>
        <member name="P:Joker.BusinessLogic.Contact.PhoneNumber">
            <summary>
            The phone number associated with this contact.
            </summary>
        </member>
        <member name="P:Joker.BusinessLogic.Contact.MarkedAsExpert">
            <summary>
            Indicates whether this contact is marked by the user as a professional or expert such as the number of a
            counseling center.
            </summary>
        </member>
        <member name="M:Joker.BusinessLogic.Contact.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            The constructor that should be used when a contact is created from user input.
            </summary>
            <param name="name">The name as supplied from the user.</param>
            <param name="phoneNumber">The phone number as supplied from the user.</param>
            <param name="markedAsExpert">Indicates whether the user has marked this contact as a professional.</param>
            <exception cref="T:System.ArgumentException">Thrown if name or phone number aren't within allowed bounds.</exception>
        </member>
        <member name="M:Joker.BusinessLogic.Contact.#ctor">
            <summary>
            The constructor to be used by SQLite database interactions and direct data manipulation.
            </summary>
        </member>
        <member name="M:Joker.BusinessLogic.Contact.op_Equality(Joker.BusinessLogic.Contact,Joker.BusinessLogic.Contact)">
            <summary>
            Compares two contacts on whether their phone numbers are the same, eliminating whitespace for comparison.
            </summary>
            <param name="left">The left operand on comparing equality.</param>
            <param name="right">The right operand on comparing equality.</param>
            <returns>Whether the contacts are equal by their phone number.</returns>
        </member>
        <member name="M:Joker.BusinessLogic.Contact.op_Inequality(Joker.BusinessLogic.Contact,Joker.BusinessLogic.Contact)">
            <summary>
            Compares two contacts on whether their phone numbers are different, eliminating whitespace for comparison.
            </summary>
            <param name="left">The left operand on comparing inequality.</param>
            <param name="right">The right operand on comparing inequality.</param>
            <returns>Whether the contacts are different by their phone number.</returns>
        </member>
        <member name="M:Joker.BusinessLogic.Contact.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the given object equals the current one, otherwise false.</returns>
        </member>
        <member name="M:Joker.BusinessLogic.Contact.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Joker.BusinessLogic.Gamble">
            <summary>
            A gamble is a gambling-related act of spending, used to calculate how much of each limit has been depleted.
            </summary>
        </member>
        <member name="F:Joker.BusinessLogic.Gamble.MaxDescriptionLength">
            <summary>
            Maximum length of a gamble's description.
            </summary>
        </member>
        <member name="P:Joker.BusinessLogic.Gamble.Type">
            <summary>
            The type this gamble is classified as.
            </summary>
        </member>
        <member name="P:Joker.BusinessLogic.Gamble.Description">
            <summary>
            Optional description given verbatim by the user.
            </summary>
        </member>
        <member name="M:Joker.BusinessLogic.Gamble.#ctor(System.String,Joker.BusinessLogic.GambleType,System.String)">
            <summary>
            Constructor used when the user doesn't specify a time.
            </summary>
            <param name="amount">The amount as put in by the user.</param>
            <param name="type">The type as selected by the user.</param>
            <param name="description">The description as given by the user.</param>
        </member>
        <member name="M:Joker.BusinessLogic.Gamble.#ctor(System.DateTime,System.String,Joker.BusinessLogic.GambleType,System.String)">
            <summary>
            Constructor used when the user specifies a time.
            </summary>
            <param name="time">The time as selected by the user.</param>
            <param name="amount">The amount as given by the user.</param>
            <param name="type">The type as selected by the user.</param>
            <param name="description">The description as given by the user.</param>
        </member>
        <member name="M:Joker.BusinessLogic.Gamble.#ctor">
            <summary>
            This constructor only exists for cloning and for SQLite to be able to return collections of gambles from the
            database. It should never be used to instantiate a gamble directly within the app.
            </summary>
        </member>
        <member name="T:Joker.BusinessLogic.GambleType">
            <summary>
            Contains the different types a gamble can be classified as, usually the kind of place where the money was spent.
            </summary>
        </member>
        <member name="F:Joker.BusinessLogic.GambleType.Other">
            <summary>
            The default type.
            </summary>
        </member>
        <member name="F:Joker.BusinessLogic.GambleType.Lottery">
            <summary>
            Indicates a lottery, such as LOTTO 6aus49 or Eurojackpot.
            </summary>
        </member>
        <member name="F:Joker.BusinessLogic.GambleType.SportsBet">
            <summary>
            Indicates a sports betting institution, such as ODDSET or Tipico.
            </summary>
        </member>
        <member name="F:Joker.BusinessLogic.GambleType.Casino">
            <summary>
            Indicates a casino or "gambling house" of any kind.
            </summary>
        </member>
        <member name="F:Joker.BusinessLogic.GambleType.SlotMachine">
            <summary>
            Indicates a gamble on a slot machine of some kind.
            </summary>
        </member>
        <member name="T:Joker.BusinessLogic.GambleTypes">
            <summary>
            Encapsulates logic concerning the GambleType enumeration.
            </summary>
        </member>
        <member name="F:Joker.BusinessLogic.GambleTypes.names">
            <summary>
            Holds the translated German terms for each type of gamble.
            </summary>
        </member>
        <member name="P:Joker.BusinessLogic.GambleTypes.Names">
            <summary>
            Returns the translated German terms of the gamble types in order.
            </summary>
        </member>
        <member name="M:Joker.BusinessLogic.GambleTypes.GetName(Joker.BusinessLogic.GambleType)">
            <summary>
            Gets the translated German term for the supplied gamble type.
            </summary>
            <param name="type">The gamble type constant whose translation should be given.</param>
            <returns>The translated term as a string.</returns>
        </member>
        <member name="M:Joker.BusinessLogic.GambleTypes.GetGambleType(System.String)">
            <summary>
            Finds the first key in the dictionary whose name equals the parameter.
            </summary>
            <param name="name">Translated name of the gamble type for which the type should be returned.</param>
            <returns>The gamble type belonging to the supplied translated name.</returns>
        </member>
        <member name="T:Joker.BusinessLogic.Limit">
            <summary>
            Determines how much the user is allowed to spend for gambling in the given duration.
            </summary>
        </member>
        <member name="F:Joker.BusinessLogic.Limit.InitialLimitDuration">
            <summary>
            The duration applied to the first limit set in the welcome tour.
            </summary>
        </member>
        <member name="F:Joker.BusinessLogic.Limit.MinLimitDuration">
            <summary>
            The minimum allowed duration of a limit.
            </summary>
        </member>
        <member name="F:Joker.BusinessLogic.Limit.MaxLimitDuration">
            <summary>
            The maximum allowed duration of a limit.
            </summary>
        </member>
        <member name="P:Joker.BusinessLogic.Limit.Duration">
            <summary>
            The time span after which this limit should have been replaced with a new one.
            </summary>
        </member>
        <member name="M:Joker.BusinessLogic.Limit.#ctor(System.String,System.String)">
            <summary>
            The standard constructor that should be used every time a new limit must be set.
            </summary>
            <param name="amount">The amount as put in by the user.</param>
            <param name="durationInDays">The duration in days as put in by the user.</param>
            <exception cref="T:System.ArgumentException">Thrown if the duration parameter couldn't be parsed or the parsed
            duration isn't within the allowed bounds.</exception>
        </member>
        <member name="M:Joker.BusinessLogic.Limit.#ctor">
            <summary>
            This constructor only exists for SQLite to be able to return collections of limits from the database. It
            should never be used to instantiate a limit directly within the app.
            </summary>
        </member>
        <member name="T:Joker.BusinessLogic.Picture">
            <summary>
            Represents a motivating or informing picture in the database and in the app view.
            </summary>
        </member>
        <member name="P:Joker.BusinessLogic.Picture.FilePath">
            <summary>
            The file path of the image asset associated with the picture, used as a primary key.
            </summary>
        </member>
        <member name="P:Joker.BusinessLogic.Picture.TimeAdded">
            <summary>
            The time this picture was added to the database.
            </summary>
        </member>
        <member name="P:Joker.BusinessLogic.Picture.Liked">
            <summary>
            The status indicating whether this picture is preferred by the user, which makes the picture appear more
            often by the randomized refresh in the picture feed.
            </summary>
        </member>
        <member name="M:Joker.BusinessLogic.Picture.#ctor(System.String)">
            <summary>
            The standard constructor for this class. Creates a picture based on the given file path and sets its
            properties to their default value.
            </summary>
            <param name="filePath">The file path of the embedded image resource.</param>
        </member>
        <member name="M:Joker.BusinessLogic.Picture.#ctor">
            <summary>
            This constructor only exists for SQLite to be able to return collections of pictures from the database. It
            should never be used to instantiate a picture directly within the app.
            </summary>
        </member>
        <member name="T:Joker.BusinessLogic.Text">
            <summary>
            Contains one-liner string constants that are displayed to the user in various parts of the app.
            </summary>
        </member>
        <member name="T:Joker.BusinessLogic.TimelineRecord">
            <summary>
            Base class for gambles and limits, as they are recordings of gambling or self-imposed limits by the user that
            can be ordered chronologically.
            </summary>
        </member>
        <member name="F:Joker.BusinessLogic.TimelineRecord.MinAmount">
            <summary>
            The minimum amount for a gamble or a limit.
            </summary>
        </member>
        <member name="F:Joker.BusinessLogic.TimelineRecord.MaxAmount">
            <summary>
            The maximum amount for a gamble or a limit.
            </summary>
        </member>
        <member name="P:Joker.BusinessLogic.TimelineRecord.Time">
            <summary>
            The time at which the gamble occurred or the limit has been set.
            </summary>
        </member>
        <member name="P:Joker.BusinessLogic.TimelineRecord.Amount">
            <summary>
            The amount relevant to this gamble or limit.
            </summary>
        </member>
        <member name="M:Joker.BusinessLogic.TimelineRecord.#ctor(System.String)">
            <summary>
            Constructor called for limits as well as gambles that don't have a user-specified time.
            </summary>
            <param name="amount">The amount as put in by the user.</param>
        </member>
        <member name="M:Joker.BusinessLogic.TimelineRecord.#ctor">
            <summary>
            This constructor is necessary for the subclasses to be instantiated by SQLite in database queries.
            </summary>
        </member>
        <member name="M:Joker.BusinessLogic.TimelineRecord.Parse(System.String)">
            <summary>
            A parsing function to get a decimal monetary value from user input.
            </summary>
            <param name="amount">The amount to be parsed as put in by the user.</param>
            <returns>A monetary value in decimal form.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the amount parameter couldn't be parsed or isn't within the
            allowed bounds.</exception>
        </member>
        <member name="T:Joker.DataAccess.AppSettings">
            <summary>
            A wrapper class that simplifies access to persistent preferences concerning app operations.
            </summary>
        </member>
        <member name="P:Joker.DataAccess.AppSettings.DatabaseFilePath">
            <summary>
            Gets or sets the path of the database file.
            </summary>
        </member>
        <member name="P:Joker.DataAccess.AppSettings.WelcomeTourCompleted">
            <summary>
            Gets or sets whether the user welcome tour was completed.
            </summary>
        </member>
        <member name="P:Joker.DataAccess.AppSettings.UserPasswordIsSet">
            <summary>
            Gets or sets the condition whether the user has protected the app with a password.
            </summary>
        </member>
        <member name="P:Joker.DataAccess.AppSettings.FirstSecurityQuestionIsSet">
            <summary>
            Gets or sets the condition whether the user has set their first security question.
            </summary>
        </member>
        <member name="P:Joker.DataAccess.AppSettings.SecondSecurityQuestionIsSet">
            <summary>
            Gets or sets the condition whether the user has set their second security question.
            </summary>
        </member>
        <member name="P:Joker.DataAccess.AppSettings.LimitExpiredTime">
            <summary>
            Gets or sets the time when the current active limit expires and a new one must be set.
            </summary>
        </member>
        <member name="P:Joker.DataAccess.AppSettings.NewPictureTime">
            <summary>
            Gets or sets the time when the availability of a new picture should be notified.
            </summary>
        </member>
        <member name="T:Joker.DataAccess.Database">
            <summary>
            A utility class containing all methods that interact with the app's local database.
            </summary>
        </member>
        <member name="M:Joker.DataAccess.Database.#cctor">
            <summary>
            This solves a severe data corruption bug probably caused by a new SQLite library version where TimeSpans are
            parsed incorrectly.
            </summary>
        </member>
        <member name="M:Joker.DataAccess.Database.Initialize">
            <summary>
            Ensures all necessary tables for database operations exist before they are performed.
            </summary>
        </member>
        <member name="M:Joker.DataAccess.Database.Insert(Joker.BusinessLogic.Limit)">
            <summary>
            Inserts the specified Limit object into the database.
            </summary>
            <param name="limit">The limit to be inserted.</param>
            <exception cref="T:SQLite.SQLiteException">Thrown if a limit with the parameter's time property already exists in the
            database.</exception>
        </member>
        <member name="M:Joker.DataAccess.Database.Insert(Joker.BusinessLogic.Gamble)">
            <summary>
            Safely inserts a Gamble object into the database. Contains input validation.
            </summary>
            <param name="gamble">The gamble to be inserted.</param>
            <exception cref="T:System.ArgumentException">Thrown if the parameter's time property is earlier than the first
            limit's time.</exception>
        </member>
        <member name="M:Joker.DataAccess.Database.Insert(Joker.BusinessLogic.Contact)">
            <summary>
            Inserts a contact into the database when there is no other contact with the same phone number.
            </summary>
            <param name="contact">The contact to be inserted.</param>
            <exception cref="T:System.ArgumentException">Thrown if a contact with the same phone number already exists in the
            database.</exception>
        </member>
        <member name="M:Joker.DataAccess.Database.InsertPictureFromRandomAsset">
            <summary>
            Selects a random image asset from the PictureFeed folder and inserts it as a Picture object into the
            database. Prevents duplicate images.
            </summary>
            <returns>Returns whether a random picture could be inserted.</returns>
        </member>
        <member name="M:Joker.DataAccess.Database.CountLimits">
            <summary>
            Counts the number of limits stored in the database.
            </summary>
            <returns>Number of rows of the Limit table.</returns>
        </member>
        <member name="M:Joker.DataAccess.Database.AllGamblesAndLimits">
            <summary>
            Joins the Gamble and Limit tables, copying them as an array of timeline records sorted by their Time
            property from newest to oldest.
            </summary>
            <returns>An array of all gambles and limits, unbound to the database.</returns>
        </member>
        <member name="M:Joker.DataAccess.Database.AllContacts">
            <summary>
            Gets a copy of all contact entries in the database, from newest to oldest.
            </summary>
            <returns>An array of contacts, unbound to the database.</returns>
        </member>
        <member name="M:Joker.DataAccess.Database.AllPictures">
            <summary>
            Gets a copy of all picture entries in the database.
            </summary>
            <returns>A list of pictures, unbound to the database.</returns>
        </member>
        <member name="M:Joker.DataAccess.Database.LikedPictures">
            <summary>
            Gets a copy of all picture entries in the database marked as liked.
            </summary>
            <returns>An array of pictures marked as liked, unbound to the database.</returns>
        </member>
        <member name="M:Joker.DataAccess.Database.MostRecentLimit">
            <summary>
            Gets a copy of the most recent limit added to the database.
            </summary>
            <returns>A single Limit instance, unbound to the database.</returns>
        </member>
        <member name="M:Joker.DataAccess.Database.MostRecentPicture">
            <summary>
            Returns a copy of the most recent picture added to the database.
            </summary>
            <returns>A single Picture instance, unbound to the database.</returns>
        </member>
        <member name="M:Joker.DataAccess.Database.NoGambleAfterMostRecentLimit">
            <summary>
            Indicates whether the user has entered a gamble after the most recent limit was set.
            </summary>
            <returns>Indicates if there are no gambles after the most recent limit.</returns>
        </member>
        <member name="M:Joker.DataAccess.Database.NextLimitAfter(Joker.BusinessLogic.Limit)">
            <summary>
            Returns the limit stored after the specified limit or null if no such limit exists.
            </summary>
            <param name="limit">The limit whose following limit is to be found.</param>
            <returns>The limit directly after the argument or null.</returns>
        </member>
        <member name="M:Joker.DataAccess.Database.AllGamblesWithinLimit(Joker.BusinessLogic.Limit)">
            <summary>
            Returns all gambles lying within the duration of a specific limit.
            </summary>
            <param name="limit">The limit whose gambles are searched for.</param>
            <returns>All gambles within the duration of the limit in an array.</returns>
        </member>
        <member name="M:Joker.DataAccess.Database.CalcBalance(Joker.BusinessLogic.Limit)">
            <summary>
            Returns how much of a limit's amount has been consumed by the gambles within its duration.
            </summary>
            <param name="limit">The limit whose balance should be calculated.</param>
            <returns>How much of the limit remains as a decimal number.</returns>
        </member>
        <member name="M:Joker.DataAccess.Database.CalcPreviousLimitBalance">
            <summary>
            Returns how much of the second most recent limit's amount has been depleted by the user's gambling records.
            </summary>
            <returns>The current balance of the limit as a decimal.</returns>
        </member>
        <member name="M:Joker.DataAccess.Database.CalcRemainingLimit(Joker.BusinessLogic.Gamble)">
            <summary>
            Calculates the remaining limit amount chronologically after a particular gamble.
            </summary>
            <param name="gamble">The gamble whose remaining limit should be calculated.</param>
            <returns>The decimal amount of the limit minus all relevant gambles' amounts.</returns>
        </member>
        <member name="M:Joker.DataAccess.Database.ToggleLikedStatus(Joker.BusinessLogic.Picture)">
            <summary>
            Switches the Liked status of the supplied picture in the database if it exists.
            </summary>
            <param name="pic">The picture whose Liked status should be toggled.</param>
        </member>
        <member name="M:Joker.DataAccess.Database.Update(Joker.BusinessLogic.Gamble)">
            <summary>
            Updates the specified gamble in the database.
            </summary>
            <param name="gamble">The gamble to be updated.</param>
        </member>
        <member name="M:Joker.DataAccess.Database.Update(Joker.BusinessLogic.Contact)">
            <summary>
            Updates the specified contact in the database.
            </summary>
            <param name="contact">The contact to be updated.</param>
            <exception cref="T:System.ArgumentException">Thrown if another contact with the parameter contact's phone number
            already exists in the database.</exception>
        </member>
        <member name="M:Joker.DataAccess.Database.Delete(Joker.BusinessLogic.Contact)">
            <summary>
            Deletes the specified contact in the database.
            </summary>
            <param name="contact">The contact to be deleted.</param>
        </member>
        <member name="M:Joker.DataAccess.Database.Delete(Joker.BusinessLogic.Picture)">
            <summary>
            Deletes the specified picture in the database.
            </summary>
            <param name="pic">The picture to be deleted.</param>
        </member>
        <member name="T:Joker.DataAccess.UserSettings">
            <summary>
            A wrapper class that simplifies access to persistent preferences set by the user directly.
            </summary>
        </member>
        <member name="F:Joker.DataAccess.UserSettings.MaxNameLength">
            <summary>
            The maximum string length of the user name.
            </summary>
        </member>
        <member name="F:Joker.DataAccess.UserSettings.MaxPasswordLength">
            <summary>
            The maximum string length of the user password.
            </summary>
        </member>
        <member name="F:Joker.DataAccess.UserSettings.MaxSecurityAttributeLength">
            <summary>
            The maximum string length for either a security question or answer.
            </summary>
        </member>
        <member name="F:Joker.DataAccess.UserSettings.MinNewPictureInterval">
            <summary>
            The minimum allowed time span between two new pictures, which is 2 days.
            </summary>
        </member>
        <member name="F:Joker.DataAccess.UserSettings.MaxNewPictureInterval">
            <summary>
            The maximum allowed time span between two new pictures, which is 28 days.
            </summary>
        </member>
        <member name="F:Joker.DataAccess.UserSettings.MinReminderInterval">
            <summary>
            The minimum allowed time span between two reminders, which is 2 hours.
            </summary>
        </member>
        <member name="F:Joker.DataAccess.UserSettings.MaxReminderInterval">
            <summary>
            The maximum allowed time span between two reminders, which is 200 hours.
            </summary>
        </member>
        <member name="P:Joker.DataAccess.UserSettings.UserName">
            <summary>
            The name used to address the user in personalized texts or push notifications.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the user tries to set this property to a text that is longer
            than the maximum allowed length or is a null or empty string.</exception>
        </member>
        <member name="P:Joker.DataAccess.UserSettings.UserPassword">
            <summary>
            The optional password with which the user can protect access to the app's content.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the user tries to set this property to a text that is longer
            than the maximum allowed length or is a null or empty string.</exception>
        </member>
        <member name="P:Joker.DataAccess.UserSettings.FirstSecurityAttribute">
            <summary>
            Holds the text of the first security question and its answer.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the user tries to set this property to a text that is longer
            than the maximum allowed length or is a null or empty string.</exception>
        </member>
        <member name="P:Joker.DataAccess.UserSettings.SecondSecurityAttribute">
            <summary>
            Holds the text of the second security question and its answer.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the user tries to set this property to a text that is longer
            than the maximum allowed length or is a null or empty string.</exception>
        </member>
        <member name="P:Joker.DataAccess.UserSettings.NewPictureInterval">
            <summary>
            The time span between two new pictures. The default value is 2 days.
            </summary>
        </member>
        <member name="P:Joker.DataAccess.UserSettings.GambleReminderInterval">
            <summary>
            The time span between two notifications, that remind the user that they should always record their
            gambling-related spendings in the app.
            </summary>
        </member>
        <member name="P:Joker.DataAccess.UserSettings.LimitReminderInterval">
            <summary>
            The time span between two push notifications, that remind the user about the current state of their limit.
            </summary>
        </member>
        <member name="M:Joker.DataAccess.UserSettings.SetNewPictureInterval(System.String)">
            <summary>
            Sets the time span between two new pictures from a user-supplied text string.
            </summary>
            <param name="input">User input from an entry to be parsed.</param>
            <exception cref="T:System.ArgumentException">Thrown if the argument couldn't be parsed or isn't within the allowed
            TimeSpan bounds.</exception>
        </member>
        <member name="M:Joker.DataAccess.UserSettings.SetGambleReminderInterval(System.String)">
            <summary>
            Sets the time span between two gambling reminders from a user-supplied text string.
            </summary>
            <param name="input">User input from an entry to be parsed.</param>
        </member>
        <member name="M:Joker.DataAccess.UserSettings.SetLimitReminderInterval(System.String)">
            <summary>
            Sets the time span between two limit reminders from a user-supplied text string.
            </summary>
            <param name="input">User input from an entry to be parsed.</param>
        </member>
        <member name="M:Joker.DataAccess.UserSettings.ParseReminderInterval(System.String)">
            <summary>
            Parses a user input string from the settings page according the bounds of reminder notifications.
            </summary>
            <param name="input">String to be parsed.</param>
            <returns>The parsed time span.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the argument couldn't be parsed or isn't within the allowed
            TimeSpan bounds.</exception>
        </member>
        <member name="T:Joker.JokerApp">
            <summary>
            Main class for the shared code application.
            </summary>
        </member>
        <member name="F:Joker.JokerApp.Assembly">
            <summary>
            Gets the app assembly for reflecting on embedded assets.
            </summary>
        </member>
        <member name="F:Joker.JokerApp.Locale">
            <summary>
            The locale or culture setting to use for this app.
            </summary>
        </member>
        <member name="M:Joker.JokerApp.#ctor(System.String)">
            <summary>
            Entry point for the shared code application.
            </summary>
            <param name="baseDirectory">The directory for files concerning the app directly.</param>
        </member>
        <member name="M:Joker.JokerApp.SetMainPageToDefault">
            <summary>
            Directs the user to the regular main page if the most recent limit hasn't expired yet, otherwise directs
            them to the page where they can add a new limit.
            </summary>
        </member>
        <member name="M:Joker.JokerApp.OnStart">
            <summary>
            Entry point from the user's perspective.
            </summary>
        </member>
        <member name="M:Joker.JokerApp.DefaultStart">
            <summary>
            Entry point if the welcome tour has been completed.
            </summary>
        </member>
        <member name="T:Joker.UserInterface.ContactViewModel">
            <summary>
            Represents a single contact for display in contact-related pages.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.ContactViewModel.ContactName">
            <summary>
            The name derived from the contact model.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.ContactViewModel.PhoneNumber">
            <summary>
            The phone number derived from the contact model.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.ContactViewModel.MarkedAsExpert">
            <summary>
            The status whether a contact is marked as professional, derived from the contact model.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.ContactViewModel.EditingEnabled">
            <summary>
            Indicates whether editing of the contact model is currently enabled.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.ContactViewModel.EditButtonText">
            <summary>
            Determines the text of the button that toggles the editing status.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.ContactViewModel.IconBackgroundColor">
            <summary>
            The color used to paint the background of the icon frame.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.ContactViewModel.TypeIcon">
            <summary>
            The icon used to differentiate expert contacts from regular contacts.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.ContactViewModel.OpenDetailPage">
            <summary>
            Navigates the user to a detailed view of the view model's contact.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.ContactViewModel.InsertNameFromClipboard">
            <summary>
            Sets the contact name in the view model from clipboard content.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.ContactViewModel.InsertPhoneNumberFromClipboard">
            <summary>
            Sets the phone number in the view model from clipboard content.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.ContactViewModel.CallContact">
            <summary>
            Opens the platform's telephone app with the corresponding contact's phone number.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.ContactViewModel.ToggleEditingStatus">
            <summary>
            Toggles the editing status for the contact detail page, saving the changes on deactivating editing.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.ContactViewModel.DeleteContact">
            <summary>
            The command by which the model contact will be deleted in the database.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.ContactViewModel.#ctor(Xamarin.Forms.Page,Joker.BusinessLogic.Contact,System.Action)">
            <summary>
            Constructs a contact view model for the given view.
            </summary>
            <param name="view">The view for this view model.</param>
            <param name="model">The model for this view model.</param>
            <param name="refresh">Callback for refreshing the contact page.</param>
        </member>
        <member name="T:Joker.UserInterface.GambleViewModel">
            <summary>
            View model for a gamble in the gamble inspector. Uses many properties of the timeline record view model.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.GambleViewModel.Gamble">
            <summary>
            Wrapper in order to treat the model as a gamble because of inheritance from TimelineRecordViewModel.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.GambleViewModel.Description">
            <summary>
            The description of this gamble as supplied from a model object.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.GambleViewModel.DescriptionEditable">
            <summary>
            Indicates whether the description of the gamble can currently be edited by the user.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.GambleViewModel.GambleType">
            <summary>
            The type of this gamble as the proper translation.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.GambleViewModel.EditButtonText">
            <summary>
            Determines the text of the button that toggles the editing status.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.GambleViewModel.EditButtonBgrColor">
            <summary>
            Determines the background color of the button that toggles the editing status.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.GambleViewModel.EditButtonTextColor">
            <summary>
            Determines the text color of the button that toggles the editing status.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.GambleViewModel.ToggleDescriptionEditing">
            <summary>
            Toggles the editability of the gamble's description, saving the changes when deactivating editing.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.GambleViewModel.#ctor(Xamarin.Forms.Page,Joker.BusinessLogic.Gamble)">
            <summary>
            Constructs the view model for a gamble.
            </summary>
            <param name="view">The page for this view model.</param>
            <param name="model">The gamble around which to construct the view model.</param>
        </member>
        <member name="T:Joker.UserInterface.Icons">
            <summary>
            Holds fields that preload commonly used icons for performance.
            </summary>
        </member>
        <member name="T:Joker.UserInterface.ImageAssetExtension">
            <summary>
            Necessary for images to be embedded in XAML.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.ImageAssetExtension.Source">
            <summary>
            The source path for the embedded resource image.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.ImageAssetExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            Converts the source path to a Xamarin.Forms image source.
            </summary>
            <param name="serviceProvider">Provides a service object for this extension.</param>
            <returns>A Xamarin.Forms image source as a generic object.</returns>
        </member>
        <member name="T:Joker.UserInterface.LimitViewModel">
            <summary>
            View model for a limit in the limit inspector. Uses many properties of the timeline record view model.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.LimitViewModel.Balance">
            <summary>
            The currently remaining balance of the limit.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.LimitViewModel.DurationInDays">
            <summary>
            The duration in days.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.LimitViewModel.LimitState">
            <summary>
            A text indicating the state of the limit.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.LimitViewModel.LimitStateBackground">
            <summary>
            The color marking the state of the limit.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.LimitViewModel.LimitStateTextColor">
            <summary>
            The color for the text that indicates the limit state.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.LimitViewModel.HistoryChart">
            <summary>
            Returns the chart associated with how the limit was depleted over time.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.LimitViewModel.Limit">
            <summary>
            Wrapper in order to treat the model as a limit because of inheritance from TimelineRecordViewModel.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.LimitViewModel.#ctor(Xamarin.Forms.Page,Joker.BusinessLogic.Limit)">
            <summary>
            Constructs the view model for a limit.
            </summary>
            <param name="view">The page for this view model.</param>
            <param name="model">The limit around which to construct the view model.</param>
        </member>
        <member name="T:Joker.UserInterface.PaintSurfaceBehavior">
            <summary>
            Helper class for converting SKCanvasView's paint surface events to commands.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.PaintSurfaceBehavior.CommandProperty">
            <summary>
            Bindable property required for the command.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.PaintSurfaceBehavior.Command">
            <summary>
            Holds the command invoked instead of a paint surface event handler.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.PaintSurfaceBehavior.OnAttachedTo(SkiaSharp.Views.Forms.SKCanvasView)">
            <summary>
            Invoked immediately after the behavior is attached to a control.
            </summary>
            <param name="bindable">The bindable canvas view to which the behavior was attached.</param>
        </member>
        <member name="M:Joker.UserInterface.PaintSurfaceBehavior.OnDetachingFrom(SkiaSharp.Views.Forms.SKCanvasView)">
            <summary>
            Invoked when the behavior is removed from the control.
            </summary>
            <param name="bindable">The bindable canvas view to which the behavior was attached.</param>
        </member>
        <member name="T:Joker.UserInterface.PictureFeedViewModel">
            <summary>
            View model containing properties derived from a picture for the purpose of presentation.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.PictureFeedViewModel.LikeButtonImage">
            <summary>
            Determines the image to display on the Like button based on the current Liked status.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.PictureFeedViewModel.LikeButtonBackgroundColor">
            <summary>
            Determines the background color of the Like button based on the current Liked status.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.PictureFeedViewModel.LikeButtonText">
            <summary>
            Determines the text of the Like button based on the current Liked status.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.PictureFeedViewModel.SetNextPicture">
            <summary>
            Re-binds the view to a randomly selected picture from the database, preferring the liked pictures with a
            ratio of 3:1.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.PictureFeedViewModel.DrawImage">
            <summary>
            Loads and draws the bitmap corresponding to the picture that should be presented and draws a blur around it.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.PictureFeedViewModel.ToggleLikedStatus">
            <summary>
            Updates the picture with the changed Liked status in the database and notifies the change of property.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.PictureFeedViewModel.SavePictureToGallery">
            <summary>
            Copies the current picture's image file to the user's personal phone storage.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.PictureFeedViewModel.Model">
            <summary>
            The picture from which the values of bindable properties are derived.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.PictureFeedViewModel.#ctor(Joker.UserInterface.PictureFeed,Joker.BusinessLogic.Picture)">
            <summary>
            Constructs a picture feed view model for the given view.
            </summary>
            <param name="view">The view for this view model.</param>
            <param name="model">The model for this view model.</param>
        </member>
        <member name="T:Joker.UserInterface.Styles">
            <summary>
            Holds commonly used style values for XAML pages.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.Styles.PagePadding">
            <summary>
            Regular padding for pages.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.Styles.StripMargin">
            <summary>
            Padding for the light-gray sections used in several pages.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.Styles.Bgr1">
            <summary>
            Used mainly as background color for most pages.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.Styles.Bgr2">
            <summary>
            Used mainly as background color for small page sections.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.Styles.Bgr3">
            <summary>
            Used mainly as background color for most buttons and highlighted sections.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.Styles.Bgr4">
            <summary>
            Used mainly as background color for buttons in highlighted sections.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.Styles.Bgr5">
            <summary>
            Used mainly as background color for important buttons.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.Styles.Primary1">
            <summary>
            The primary blue for the Joker design.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.Styles.Primary2">
            <summary>
            A darker blue used with the primary blue for shading.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.Styles.Text1">
            <summary>
            Primary text color.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.Styles.Text2">
            <summary>
            Secondary text color for less visible text.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.Styles.TextContrast">
            <summary>
            Text color for dark backgrounds.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.Styles.Link">
            <summary>
            Text color for hyperlinks.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.Styles.CustomSmall">
            <summary>
            Small text size.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.Styles.CustomMedium">
            <summary>
            Medium text size.
            </summary>
        </member>
        <member name="T:Joker.UserInterface.TimelineRecordViewModel">
            <summary>
            Represents a single timeline record for display in timeline-related pages.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.TimelineRecordViewModel.RemainingLimit">
            <summary>
            The text to be displayed in the remaining limit column in the timeline.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.TimelineRecordViewModel.TypeIcon">
            <summary>
            The icon to be displayed in the timeline based on what type of record it is.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.TimelineRecordViewModel.CellBgrColor">
            <summary>
            The primary tinting color used in the timeline.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.TimelineRecordViewModel.IconBgrColor">
            <summary>
            The secondary tinting color used in the timeline.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.TimelineRecordViewModel.CellTextColor">
            <summary>
            The primary text color used in the timeline.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.TimelineRecordViewModel.LocalizedTime">
            <summary>
            Converts the record's time property to the system's time zone in the 24-hour format.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.TimelineRecordViewModel.AmountInEuro">
            <summary>
            Converts the amount to a Euro monetary value.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.TimelineRecordViewModel.OpenDetailPage">
            <summary>
            Navigates the user to a detailed view of the selected limit or gamble item.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.TimelineRecordViewModel.#ctor(Xamarin.Forms.Page,Joker.BusinessLogic.TimelineRecord)">
            <summary>
            Constructs a view model for a row based on whether the corresponding timeline record is a gamble or a limit.
            </summary>
            <param name="view">The view for this view model.</param>
            <param name="model">The model for this view model.</param>
        </member>
        <member name="T:Joker.UserInterface.ViewModel`2">
            <summary>
            An abstract base class for all view models with required interfaces and constraints.
            </summary>
            <typeparam name="TView">Type of the view where the model's properties are presented.</typeparam>
            <typeparam name="TModel">Type of the model object whose properties are accessed for presentation.</typeparam>
        </member>
        <member name="P:Joker.UserInterface.ViewModel`2.View">
            <summary>
            The object to which changes in the view model are communicated.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.ViewModel`2.Model">
            <summary>
            The object from which view model properties are derived.
            </summary>
        </member>
        <member name="E:Joker.UserInterface.ViewModel`2.PropertyChanged">
            <summary>
            Event for when a property has changed in the view model.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.ViewModel`2.#ctor(`0,`1)">
            <summary>
            Constructs a view model with the given view and model references.
            </summary>
            <param name="view">The view for this view model.</param>
            <param name="model">The model for this view model.</param>
        </member>
        <member name="M:Joker.UserInterface.ViewModel`2.OnPropertyChanged(System.String)">
            <summary>
            Invokes subscribers of the PropertyChanged event.
            </summary>
            <param name="propertyName">Name of the property that has changed.</param>
        </member>
        <member name="T:Joker.UserInterface.AddContactPage">
            <summary>
            View where the user defines the data for a new contact and can insert it into the database.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.AddContactPage.#ctor(System.Action)">
            <summary>
            Initializes XAML elements.
            </summary>
            <param name="refresh">Callback for refreshing the contact page.</param>
        </member>
        <member name="M:Joker.UserInterface.AddContactPage.OnNameClipboardButton(System.Object,System.EventArgs)">
            <summary>
            Button event handler that copies clipboard content to the name entry.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.AddContactPage.OnPhoneNumberClipboardButton(System.Object,System.EventArgs)">
            <summary>
            Button event handler that copies clipboard content to the phone number entry.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.AddContactPage.OnSearchDeviceContactsButton(System.Object,System.EventArgs)">
            <summary>
            Button event handler that opens the contact-picking dialog to the user and enters the results into the
            entries in the view.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.AddContactPage.OnSubmitButton(System.Object,System.EventArgs)">
            <summary>
            Button event handler that inserts the contact into the database, performs necessary refresh actions and
            navigates the user back to the main page.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="T:Joker.UserInterface.ContactInspector">
            <summary>
            A view containing the database-supplied details and properties of a selected contact.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.ContactInspector.#ctor(Joker.UserInterface.ContactViewModel)">
            <summary>
            Initializes XAML elements and provides the data to be bound in the view.
            </summary>
            <param name="contactViewModel">View model through which the contact details will be exposed.</param>
        </member>
        <member name="T:Joker.UserInterface.ContactPage">
            <summary>
            The main page's right tab. A view that lists all recorded contacts and allows the user to edit and call them.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.ContactPage.Headline">
            <summary>
            The title of this page, provided here to be accessible from anywhere.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.ContactPage.Contacts">
            <summary>
            An array of contacts in a view model that can be immediately called by the user.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.ContactPage.#ctor">
            <summary>
            Initializes XAML elements and binds the view data.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.ContactPage.Refresh">
            <summary>
            Refreshes the contacts data binding in this view.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.ContactPage.OnSearchCounselingCentersOnline(System.Object,System.EventArgs)">
            <summary>
            Label event handler that opens a link where the user can search for counseling centers.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.ContactPage.OnSubmitButton(System.Object,System.EventArgs)">
            <summary>
            Button event handler that navigates the user to a view where they can add a new contact to the database.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="T:Joker.UserInterface.Impressum">
            <summary>
            View containing information about the creator and publisher of the app.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.Impressum.Version">
            <summary>
            Contains the information of the app version.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.Impressum.ContactInfo">
            <summary>
            Contains contact information about the publisher.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.Impressum.PrivacyPolicy">
            <summary>
            Contains the privacy policy.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.Impressum.OpenEmail">
            <summary>
            Event command that opens the platform-specific email app.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.Impressum.OpenWebsite">
            <summary>
            Event command that opens the platform-specific browser.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.Impressum.#ctor">
            <summary>
            Initializes XAML elements.
            </summary>
        </member>
        <member name="T:Joker.UserInterface.MainPage">
            <summary>
            Main view of the app, usually presented after launching is finished.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.MainPage.#ctor">
            <summary>
            Initializes XAML elements.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.MainPage.OnTabChanged(System.Object,System.EventArgs)">
            <summary>
            Changes the navigation page's title based on which tab is currently displayed.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.MainPage.OnInfoButton(System.Object,System.EventArgs)">
            <summary>
            Toolbar item event handler that shows the user a message concerning the current tab's functionality.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.MainPage.OnSettingsButton(System.Object,System.EventArgs)">
            <summary>
            Toolbar item event handler that navigates the user to the settings page.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="T:Joker.UserInterface.PasswordPage">
            <summary>
            A page that can be set to appear upon starting the app, prompting the user for his password.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.PasswordPage.#ctor">
            <summary>
            Initializes XAML elements.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.PasswordPage.CheckPassword(System.Object,Xamarin.Forms.TextChangedEventArgs)">
            <summary>
            Text change event handler that checks whether the password is correct.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.PasswordPage.TogglePasswordObfuscation(System.Object,System.EventArgs)">
            <summary>
            Button event handler that toggles whether the password should be hidden.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.PasswordPage.ShowSecurityQuestions(System.Object,System.EventArgs)">
            <summary>
            Label event handler that navigates the user to the page where they can answer their security questions.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="T:Joker.UserInterface.PictureFeed">
            <summary>
            The main page's left tab. A view where the user can shuffle through the different motivating or informing
            pictures in the database.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.PictureFeed.Headline">
            <summary>
            The title of this page, provided here to be accessible from anywhere.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.PictureFeed.InitialPictureAmount">
            <summary>
            The number of pictures initially available after the app was installed.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.PictureFeed.#ctor">
            <summary>
            Initializes XAML elements and sets the binding context.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.PictureFeed.RefreshPresentedPicture">
            <summary>
            Draws the next image to be presented in the picture feed.
            </summary>
        </member>
        <member name="T:Joker.UserInterface.SecurityQuestionPage">
            <summary>
            Page where the user answers their security questions to access the app in case they forgot their password.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.SecurityQuestionPage.#ctor">
            <summary>
            Initializes XAML elements.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.SecurityQuestionPage.CheckSecurityAnswer(System.Object,Xamarin.Forms.TextChangedEventArgs)">
            <summary>
            Text change event handler that checks whether the answer to the first security question is correct. If it's
            correct, the user gets navigated to the main page.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="T:Joker.UserInterface.SettingsPage">
            <summary>
            View where the user can change user-specific settings.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.SettingsPage.Headline">
            <summary>
            The title of this page, provided here to be accessible from anywhere.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.SettingsPage.#ctor(System.Action)">
            <summary>
            Initializes XAML elements.
            </summary>
            <param name="refreshFeedback">Callback for refreshing the timeline feedback text.</param>
        </member>
        <member name="M:Joker.UserInterface.SettingsPage.OnInfoButton(System.Object,System.EventArgs)">
            <summary>
            Toolbar item event handler that shows the user a message concerning this page.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.SettingsPage.SaveUserName(System.Object,System.EventArgs)">
            <summary>
            Button event handler that relays input validation for the user name setting and saves it if possible.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.SettingsPage.ToggleObfuscation(System.Object,System.EventArgs)">
            <summary>
            Button event handler that toggles whether the password and security answers should be hidden.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.SettingsPage.RemovePassword(System.Object,System.EventArgs)">
            <summary>
            Button event handler that removes the password and its text.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.SettingsPage.SavePassword(System.Object,System.EventArgs)">
            <summary>
            Button event handler that saves the text in the password entry as password if valid.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.SettingsPage.ShowSecurityQuestionProposals(System.Object,System.EventArgs)">
            <summary>
            Button event handler that opens an input dialog for selecting one of several security question proposals.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.SettingsPage.SaveSecurityAttribute(System.Object,System.EventArgs)">
            <summary>
            Saves the text of the security question and its answer based on which button was pressed and relays possible
            input errors to the user.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.SettingsPage.SaveNewPictureInterval(System.Object,System.EventArgs)">
            <summary>
            Button event handler that relays input validation for saving the interval between the insertion of new
            pictures into the database and saves the setting if possible.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.SettingsPage.SaveGambleReminderInterval(System.Object,System.EventArgs)">
            <summary>
            Button event handler that relays input validation for saving the interval between gambling reminders and
            saves the setting if possible.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.SettingsPage.SaveLimitReminderInterval(System.Object,System.EventArgs)">
            <summary>
            Button event handler that relays input validation for saving the interval between limit reminders and saves
            the setting if possible.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.SettingsPage.OnImpressumButton(System.Object,System.EventArgs)">
            <summary>
            Button event handler that navigates the user to the impressum.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="T:Joker.UserInterface.AddGamblePage">
            <summary>
            View where the user defines the data for a new gamble and can insert it into the database.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.AddGamblePage.#ctor(System.Action)">
            <summary>
            Initializes XAML elements and sets the necessary view elements to their default values.
            </summary>
            <param name="refresh">Callback for refreshing the timeline feed.</param>
        </member>
        <member name="M:Joker.UserInterface.AddGamblePage.UpdateLengthCounter(System.Object,Xamarin.Forms.TextChangedEventArgs)">
            <summary>
            Editor event handler that indicates how many characters can still be inserted into the editor.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.AddGamblePage.OnDateSelected(System.Object,Xamarin.Forms.DateChangedEventArgs)">
            <summary>
            DatePicker event handler that indicates that the user set the date of the gamble.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.AddGamblePage.OnTimeSelected(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            TimePicker event handler that indicates that the user set the time of the gamble.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.AddGamblePage.OnTimeResetButton(System.Object,System.EventArgs)">
            <summary>
            Button event handler that resets the date and time of the gamble to the present date and time.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.AddGamblePage.OnSubmitButton(System.Object,System.EventArgs)">
            <summary>
            Button event handler that relays input validation, inserts the gamble into the database, performs necessary
            refresh actions and navigates the user back to the main page.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="T:Joker.UserInterface.AddLimitPage">
            <summary>
            Unclosable view shown only when opening the app after a limit has expired, forcing the user to set a new one.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.AddLimitPage.LimitInfo">
            <summary>
            Provides a feedback text concerning whether the previous limit was exceeded.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.AddLimitPage.#ctor">
            <summary>
            Initializes XAML elements.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.AddLimitPage.OnContinueButton(System.Object,System.EventArgs)">
            <summary>
            Button event handler that relays input validation, inserts the new limit into the database, schedules the
            corresponding notifications and gets the user to the main page.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="T:Joker.UserInterface.GambleInspector">
            <summary>
            A view containing the database-supplied details and properties of a selected gamble.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.GambleInspector.#ctor(Joker.BusinessLogic.Gamble)">
            <summary>
            Initializes XAML elements and provides the data to be bound in the view.
            </summary>
            <param name="gamble">Gamble whose details should be exposed.</param>
        </member>
        <member name="T:Joker.UserInterface.LimitInspector">
            <summary>
            A view containing the database-supplied details and properties of a selected limit.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.LimitInspector.#ctor(Joker.BusinessLogic.Limit)">
            <summary>
            Initializes XAML elements and provides the data to be bound in the view.
            </summary>
            <param name="limit">Limit whose details should be displayed.</param>
        </member>
        <member name="T:Joker.UserInterface.TimelineFeed">
            <summary>
            The main page's middle tab. A list of gambling-related spendings and the limits that the user sets for themself.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.TimelineFeed.Headline">
            <summary>
            The title of this page, provided here to be accessible from anywhere.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.TimelineFeed.CurrentLimitFeedback">
            <summary>
            Generates the feedback concerning the user's current limit.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.TimelineFeed.PreviousLimitFeedback">
            <summary>
            Generates the feedback concerning the user's previous limit.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.TimelineFeed.FeedbackTogglerIcon">
            <summary>
            Determines the icon shown depending on whether the feedback text is visible.
            </summary>
        </member>
        <member name="P:Joker.UserInterface.TimelineFeed.Records">
            <summary>
            The data to be displayed, wrapped in view models based on the Limit and Gamble tables of the database.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.TimelineFeed.#ctor">
            <summary>
            Initializes XAML elements.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.TimelineFeed.RefreshFeedback">
            <summary>
            Refreshes the limit feedback text in this page.
            </summary> 
        </member>
        <member name="M:Joker.UserInterface.TimelineFeed.RefreshRecords">
            <summary>
            Refreshes the list view's data bindings and blinks the limit feedback if the limit has been exceeded.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.TimelineFeed.OnToggleFeedbackButton(System.Object,System.EventArgs)">
            <summary>
            Button event handler that toggles the visibility of the limit feedback text.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.TimelineFeed.OnSubmitButton(System.Object,System.EventArgs)">
            <summary>
            Button event handler that navigates the user to a view where they can add a new gamble to the database.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="T:Joker.UserInterface.ContactTourPage">
            <summary>
            View where the user can select their personal contact.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.ContactTourPage.FirstContact">
            <summary>
            The contact that can be selected here and will be inserted upon completing the welcome tour.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.ContactTourPage.#ctor">
            <summary>
            Initializes XAML elements.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.ContactTourPage.PickContact(System.Object,System.EventArgs)">
            <summary>
            Entry event handler that opens the contact-picking dialog to the user and saves the selected contact.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="M:Joker.UserInterface.ContactTourPage.OnContinueButton(System.Object,System.EventArgs)">
            <summary>
            Button event handler that navigates the user to the next tour page.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="T:Joker.UserInterface.Finish">
            <summary>
            Final view of the welcome tour that also contains essential setup logic.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.Finish.#ctor">
            <summary>
            Initializes XAML elements and receives the first limit for further processing.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.Finish.OnContinueButton(System.Object,System.EventArgs)">
            <summary>
            Button event handler that finalizes the setup for the app and navigates the user to the main page.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="T:Joker.UserInterface.LimitTourPage">
            <summary>
            View where the user must set their first limit.
            </summary>
        </member>
        <member name="F:Joker.UserInterface.LimitTourPage.FirstLimit">
            <summary>
            The first limit to be inserted into the database on finishing the welcome tour.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.LimitTourPage.#ctor">
            <summary>
            Initializes XAML elements.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.LimitTourPage.OnContinueButton(System.Object,System.EventArgs)">
            <summary>
            Button event handler that navigates the user to the final tour page.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="T:Joker.UserInterface.NameTourPage">
            <summary>
            View where the user should enter their name.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.NameTourPage.#ctor">
            <summary>
            Initializes XAML elements.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.NameTourPage.OnContinueButton(System.Object,System.EventArgs)">
            <summary>
            Button event handler that relays user input validation and navigates the user to the next tour page.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
        <member name="T:Joker.UserInterface.Welcome">
            <summary>
            View presented after opening the app for the first time.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.Welcome.#ctor">
            <summary>
            Initializes XAML elements.
            </summary>
        </member>
        <member name="M:Joker.UserInterface.Welcome.OnContinueButton(System.Object,System.EventArgs)">
            <summary>
            Button event handler that navigates the user to the next tour page.
            </summary>
            <param name="sender">Reference to the event's source object.</param>
            <param name="eventArgs">Contains event data.</param>
        </member>
    </members>
</doc>
